name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run lint
    - run: npm test
    
  pr-review:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Send PR data to webhook for code review
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = context.issue.number;
          
          // Get PR details
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });
          
          // Get PR files
          const files = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });
          
          // Get PR comments
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });
          
          // Get PR review comments
          const reviewComments = await github.rest.pulls.listReviewComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });
          
          // Prepare data for webhook
          const prData = {
            id: pr.data.id,
            number: pr.data.number,
            title: pr.data.title,
            body: pr.data.body,
            state: pr.data.state,
            created_at: pr.data.created_at,
            updated_at: pr.data.updated_at,
            head: {
              ref: pr.data.head.ref,
              sha: pr.data.head.sha
            },
            base: {
              ref: pr.data.base.ref,
              sha: pr.data.base.sha
            },
            user: {
              login: pr.data.user.login,
              id: pr.data.user.id
            },
            changed_files: files.data.map(file => ({
              filename: file.filename,
              status: file.status,
              additions: file.additions,
              deletions: file.deletions,
              changes: file.changes,
              patch: file.patch
            })),
            comments: comments.data.map(comment => ({
              id: comment.id,
              body: comment.body,
              user: comment.user.login,
              created_at: comment.created_at
            })),
            review_comments: reviewComments.data.map(comment => ({
              id: comment.id,
              body: comment.body,
              user: comment.user.login,
              path: comment.path,
              position: comment.position,
              created_at: comment.created_at
            }))
          };
          
          // Post data to webhook with basic auth
          const { execSync } = require('child_process');
          
          // Create basic auth header
          const username = 'cheffromspace';
          const password = '${{ secrets.WEBHOOK_AUTH_TOKEN }}';
          const auth = Buffer.from(`${username}:${password}`).toString('base64');
          
          // Set up curl command
          const curlCommand = `
            curl -X POST "${{ secrets.WEBHOOK_URL }}" \\
            -H "Authorization: Basic ${auth}" \\
            -H "Content-Type: application/json" \\
            -d '${JSON.stringify(prData)}'
          `;
          
          try {
            // Execute curl command
            execSync(curlCommand);
            
            // Log success and add comment to PR
            console.log('Successfully sent PR data to webhook');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: 'This PR data has been sent for AI-powered code review.'
            });
          } catch (error) {
            // Log error
            console.error('Error sending PR data to webhook:', error);
            core.setFailed('Failed to send PR data to webhook');
          }
