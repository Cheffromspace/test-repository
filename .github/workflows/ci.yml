name: CI Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run lint
    - run: npm test
    
  pr-review:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Send PR data to webhook for code review
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Import core for better error handling
          const core = require('@actions/core');
          
          const prNumber = context.issue.number;
          console.log('Debug: PR Number:', prNumber);
          console.log('Debug: Context:', JSON.stringify(context));
          
          // Get PR details
          console.log('Debug: Fetching PR details...');
          const pr = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });
          console.log('Debug: PR details fetched successfully');
          
          // Get PR files
          console.log('Debug: Fetching PR files...');
          const files = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });
          console.log(`Debug: Retrieved ${files.data.length} changed files`);
          
          // Get PR comments
          console.log('Debug: Fetching PR comments...');
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber
          });
          console.log(`Debug: Retrieved ${comments.data.length} comments`);
          
          // Get PR review comments
          console.log('Debug: Fetching PR review comments...');
          const reviewComments = await github.rest.pulls.listReviewComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: prNumber
          });
          console.log(`Debug: Retrieved ${reviewComments.data.length} review comments`);
          
          // Prepare data for webhook
          console.log('Debug: Preparing webhook data...');
          const prData = {
            id: pr.data.id,
            number: pr.data.number,
            title: pr.data.title,
            body: pr.data.body,
            state: pr.data.state,
            created_at: pr.data.created_at,
            updated_at: pr.data.updated_at,
            repository: {
              name: context.repo.repo,
              owner: context.repo.owner
            },
            head: {
              ref: pr.data.head.ref,
              sha: pr.data.head.sha
            },
            base: {
              ref: pr.data.base.ref,
              sha: pr.data.base.sha
            },
            user: {
              login: pr.data.user.login,
              id: pr.data.user.id
            },
            changed_files: files.data.map(file => ({
              filename: file.filename,
              status: file.status,
              additions: file.additions,
              deletions: file.deletions,
              changes: file.changes,
              patch: file.patch
            })),
            comments: comments.data.map(comment => ({
              id: comment.id,
              body: comment.body,
              user: comment.user.login,
              created_at: comment.created_at
            })),
            review_comments: reviewComments.data.map(comment => ({
              id: comment.id,
              body: comment.body,
              user: comment.user.login,
              path: comment.path,
              position: comment.position,
              created_at: comment.created_at
            }))
          };
          
          // Post data to webhook with basic auth
          console.log('Debug: Setting up webhook authentication...');
          
          // Create basic auth header
          const username = '${{ secrets.WEBHOOK_USERNAME }}';
          const password = '${{ secrets.WEBHOOK_AUTH_TOKEN }}';
          
          // Debug credential values (safely)
          console.log('Debug: Username empty?', !username || username === '');
          console.log('Debug: Password empty?', !password || password === '');
          console.log('Debug: Username from secrets?', username.startsWith('${{') ? "Not resolved" : "Resolved");
          console.log('Debug: Password from secrets?', password.startsWith('${{') ? "Not resolved" : "Resolved");
          
          const auth = Buffer.from(`${username}:${password}`).toString('base64');
          console.log('Debug: Auth header created (not showing value for security)');
          
          try {
            // Use native https request instead of curl
            const https = require('https');
            const webhookUrl = '${{ vars.WEBHOOK_URL }}';
            console.log('Debug: Webhook URL set?', webhookUrl && webhookUrl !== '' && !webhookUrl.startsWith("${{"));
            
            const url = new URL(webhookUrl);
            console.log('Debug: Webhook hostname:', url.hostname);
            console.log('Debug: Webhook path:', url.pathname);
            
            const options = {
              hostname: url.hostname,
              port: url.port || 443,
              path: url.pathname + url.search,
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Basic ${auth}`
              }
            };
            console.log('Debug: Request options prepared:', JSON.stringify({
              hostname: options.hostname,
              port: options.port,
              path: options.path,
              method: options.method,
              headers: {
                'Content-Type': options.headers['Content-Type'],
                'Authorization': 'Basic [REDACTED]'
              }
            }));
            
            console.log('Debug: Sending request to webhook...');
            const req = https.request(options, (res) => {
              console.log('Debug: Response received from webhook');
              console.log('Debug: Status code:', res.statusCode);
              console.log('Debug: Headers:', JSON.stringify(res.headers));
              
              let responseData = '';
              res.on('data', (chunk) => {
                responseData += chunk;
              });
              
              res.on('end', () => {
                console.log('Debug: Response body:', responseData.substring(0, 500) + (responseData.length > 500 ? '...' : ''));
                
                if (res.statusCode >= 200 && res.statusCode < 300) {
                  console.log('Successfully sent PR data to webhook');
                } else {
                  const error = new Error(`Request failed with status code ${res.statusCode}`);
                  console.error('Error sending PR data to webhook:', error);
                  console.error('Response body:', responseData);
                  core.setFailed('Failed to send PR data to webhook');
                }
              });
            });
            
            req.on('error', (error) => {
              console.error('Error sending PR data to webhook:', error);
              core.setFailed('Failed to send PR data to webhook');
            });
            
            console.log('Debug: Writing request body...');
            req.write(JSON.stringify(prData));
            req.end();
            console.log('Debug: Request sent');
          } catch (error) {
            // Log error with full details
            console.error('Error sending PR data to webhook:', error);
            console.error('Error name:', error.name);
            console.error('Error message:', error.message);
            console.error('Error stack:', error.stack);
            
            // Check if webhook URL is valid
            try {
              const webhookUrl = '${{ vars.WEBHOOK_URL }}';
              console.log('Debug: Webhook URL for validation:', webhookUrl ? "Present" : "Missing");
              if (webhookUrl) {
                new URL(webhookUrl); // Will throw if invalid
                console.log('Debug: Webhook URL format is valid');
              } else {
                console.error('Debug: Webhook URL is empty or not set');
              }
            } catch (urlError) {
              console.error('Debug: Invalid webhook URL format:', urlError.message);
            }
            
            // Check if core is properly imported
            if (typeof core === 'undefined') {
              console.error('Debug: core is not defined - might need to import @actions/core');
              // Try to import core
              try {
                const core = require('@actions/core');
                core.setFailed('Failed to send PR data to webhook');
              } catch (coreError) {
                console.error('Debug: Failed to import @actions/core:', coreError.message);
                // Use GitHub API to fail the workflow as fallback
                github.rest.checks.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  check_run_id: context.runId,
                  conclusion: 'failure',
                  output: {
                    title: 'PR Webhook Failed',
                    summary: 'Failed to send PR data to webhook: ' + error.message
                  }
                }).catch(ghError => {
                  console.error('Debug: Failed to update check status:', ghError.message);
                });
              }
            } else {
              core.setFailed('Failed to send PR data to webhook');
            }
          }
